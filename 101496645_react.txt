What is React?

React is an open-source JavaScript library primarily used for building dynamic and interactive user interfaces (UIs) 
for web applications. It was created by Facebook and is widely adopted in front-end development.

Key characteristics of React include:

Component-Based Architecture: React applications are built using self-contained, reusable units called components. 
Each component manages its own state and renders a specific part of the UI. This modular approach promotes code reusability 
and maintainability.

Declarative Programming: React uses a declarative approach, meaning developers describe what the UI should 
look like for a given state, and React handles the efficient updating of the Document Object Model (DOM) to match that state.

Virtual DOM: React utilizes a virtual DOM, which is a lightweight representation of the actual DOM. When a component's state 
changes, React first updates the virtual DOM and then efficiently calculates the minimal changes needed to update the real DOM, 
leading to improved performance.


JSX: React often uses JSX (JavaScript XML), a syntax extension that allows developers to write UI structures directly within 
JavaScript code, resembling HTML. This makes it easier to define the structure and appearance of components.

Focus on UI: React is a library specifically focused on the UI layer, not a full-fledged framework. This allows developers 
flexibility in choosing other libraries and tools for aspects like routing, state management, and backend integration.

Cross-Platform Capabilities: While primarily used for web development, React Native, a derivative of React, allows developers to build native mobile applications for iOS and Android using the same React principles and JavaScript codebase.

How React works:

Rendering a component: You define a component, which is a JavaScript function that returns JSX markup describing what the UI 
should look like.

Updating the Virtual DOM: When a component's state or props change, React builds a new virtual DOM to represent the updated UI.

Reconciliation: React compares the new virtual DOM with the previous one, a process called "diffing," to identify exactly what 
has changed.

Efficient update: React then applies only the necessary changes to the actual browser DOM, updating the UI quickly and without 
a full page reload. 